package com.rakuten.training.web;

import static org.junit.jupiter.api.Assertions.*;

import org.hamcrest.CoreMatchers;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.rakuten.training.domain.Product;
import com.rakuten.training.service.ProductService;



@RunWith (SpringRunner.class)
@WebMvcTest({ProductController.class})




public class ProductControllerUnitTest {
	@Autowired
	MockMvc mockMvc;
	@MockBean
	ProductService service;
	
	
	
	

  @Test
  public void getProductById_Returns_OK_With_Correct_Product_If_Found() throws Exception {
	  //Arrange
	  Product found =  new Product("test",123.0f,100);
	  int id =1;
	  found.setId(id);
	  Mockito.when(service.findById(id)).thenReturn(found);
	  
	  //Act & Assert
	  mockMvc.perform(MockMvcRequestBuilders.get("/products/{id}",id)).andExpect(MockMvcResultMatchers.status().isOk())
	  .andExpect(MockMvcResultMatchers.jsonPath("$.id", CoreMatchers.is(id)));
	  
	  
	  
	  
    fail("Not yet implemented");
  }
}
